# Spotify Liked Songs Auto-Categorizer  
**Product Requirements Document (PRD)**  
*Version 1.0 – 01 June 2025*

---

## 1. Purpose

Most Spotify users gradually accumulate hundreds or even thousands of **Liked Songs** without ever organising them into playlists.  
The purpose of this product is to perform a **one-time, high-trust clean-up** that:

1. Scans the user's entire Liked Songs library (≈ 1 500 tracks for the initial target user).  
2. Discovers intuitive grouping "labels" (e.g., genres, eras, BPM bands).  
3. Creates clearly-named playlists in the user's account that hold those tracks.  
4. Preserves user control through a visual preview and an easy rollback.

---

## 2. Goals & Success Metrics

| Goal | Metric | Target |
|------|--------|--------|
| Rapid clean-up | End-to-end runtime for 1 500 songs | **≤ 3 min** (P50), **≤ 6 min** (P95) |
| User trust | % sessions where user clicks **"Generate playlists"** after preview | **≥ 80 %** |
| Playlist precision | Manual audit: tracks that logically fit their playlist | **≥ 90 %** |
| Low disruption | Spotify abuse-flag "playlist spam" incidents | **0** |

> *Note:* Metrics collected locally or via optional anonymous telemetry; no server-side tracking required for the personal MVP.

---

## 3. Personas

| Persona | Characteristics | Needs |
|---------|-----------------|-------|
| **Primary User** (owner) | • Heavy Spotify listener<br>• 1 000 – 5 000 liked tracks<br>• Comfortable authorising third-party apps | • Fast, accurate categorisation<br>• Zero learning curve<br>• Confidence that nothing breaks their library |
| **Future Public Users** | • Same as above but not technical | • Clear privacy stance<br>• Simple onboarding and optional support |

---

## 4. Assumptions & Constraints

* Single-user, self-hosted deployment (Vercel) — no multi-tenant DB yet.  
* Access limited to standard Spotify scopes:  
  `user-library-read`, `playlist-modify-private`, `playlist-modify-public`.  
  Audio-feature endpoints require **Extended Mode**.  
* Spotify rate limit: **10 requests / sec** per user token.  
* Max 10 000 tracks per playlist (Spotify hard limit) — well above current scope.  
* File-based SQLite is sufficient for caching track metadata and run history.

---

## 5. Functional Requirements

### 5.1 Authentication
* Use OAuth 2.0 PKCE flow.  
* Store short-lived token + refresh token encrypted in browser `IndexedDB`.

### 5.2 Data Ingest
| Req-ID | Requirement |
|--------|-------------|
| **ING-01** | Fetch all liked tracks, 50 per call, until `next` is `null`. |
| **ING-02** | Cache `track_id`, `track_name`, `artists`, `artist_ids`, `album`, `release_year`, `duration_ms`, `popularity`. |
| **ING-03** | For each `artist_id`, fetch genres (batch `GET /artists?ids=`). |
| **ING-04** | If Extended Mode: batch-fetch audio features (danceability, energy, valence, tempo). |
| **ING-05** | Persist ingest timestamp; skip unchanged tracks on reruns. |

### 5.3 Label Discovery
| Req-ID | Requirement |
|--------|-------------|
| **LAB-01** | Generate histograms of candidate dimensions: top 15 genres, decade buckets, BPM bands (if available), energy quartiles. |
| **LAB-02** | Render an *Explore Panel* React component listing each dimension with counts; provide toggle + minimum-track slider. |
| **LAB-03** | Persist the final label rule set chosen by the user. |

### 5.4 Playlist Generation
| Req-ID | Requirement |
|--------|-------------|
| **PLY-01** | Derive a deterministic playlist **key** from the label (e.g., `genre=indie_pop`). |
| **PLY-02** | Base playlist name template: `<emoji> <readable label>` (emoji chosen per dimension). |
| **PLY-03** | If a name collision exists, append ordinal suffix `(2)`, `(3)…`. |
| **PLY-04** | Batch add tracks in groups of 20, sleep 500 ms between batches. |
| **PLY-05** | Maintain mapping `playlist_key → playlist_id` in DB for rollback. |

### 5.5 Preview & Confirmation
| Req-ID | Requirement |
|--------|-------------|
| **PRV-01** | Show a preview table: playlist name, track count, first 5 sample tracks. |
| **PRV-02** | Provide **Generate** and **Cancel** buttons. |
| **PRV-03** | Disable **Generate** while a job is already running. |

### 5.6 Undo
| Req-ID | Requirement |
|--------|-------------|
| **UND-01** | After creation, show **Roll Back** button valid for 30 minutes. |
| **UND-02** | On rollback, delete only playlists whose IDs are stored from this run. |
| **UND-03** | Handle partial failures gracefully and surface errors. |

---

## 6. Non-Functional Requirements

| Category | Requirement |
|----------|-------------|
| **Performance** | Categorise 1 500 tracks in **≤ 3 min** P50; use batch endpoints aggressively. |
| **Scalability** | Design ingest & grouping code to stream; memory ≤ 150 MB for 10 000 tracks. |
| **Reliability** | Retry Spotify 5xx up to 3 times with exponential back-off; persist intermediate state so job can resume. |
| **Security** | Store tokens encrypted with AES-256 in browser; no secure server storage needed for personal MVP. |
| **Accessibility** | Front-end meets WCAG 2.1 AA (color contrast, keyboard nav). |
| **Maintainability** | Codebase linted (ESLint / Prettier), 80 % unit test coverage for grouping logic. |

---

## 7. Tech Stack

| Layer | Choice | Rationale |
|-------|--------|-----------|
| Front-end | Next.js 14 (React 18) | Fast Vercel deploy; React UI for explore panel & preview |
| Back-end API | Node.js 20 + `spotify-web-api-node` | Mature SDK with batching helpers |
| Data store | SQLite (file) via Prisma | Zero-config for single user; easy upgrade path to Postgres |
| Hosting | Vercel (Hobby plan) | Free, CI/CD integrated |
| CI | GitHub Actions | Lint, unit tests, build |

---

## 8. Future Scope (Phase 2+)

1. **Continuous Sync** – nightly job that adds new likes to existing playlists.  
2. **Multi-User SaaS** – token storage in Postgres + row-level security.  
3. **ML-Driven Mood Clustering** – open-source music embeddings to surface nuanced moods.  
4. **Mobile Companion** – React Native wrapper using the same API.  
5. **Social Sharing** – allow users to share label rule sets or playlists.

---

## 9. Out of Scope (MVP)

* Editing or deleting existing user playlists.  
* Real-time updates while a user is liking songs.  
* Local audio analysis from 30 sec previews (unless Extended Mode is granted).  
* Any paid subscription or billing logic.

---

## 10. Open Questions

1. **Emoji Palette** – fixed set per dimension or randomised?  
2. **Minimum Playlist Size** – default 15 tracks / user-editable?  
3. **Extended Mode Access** – fallback plan if denied?  
4. **Telemetry** – do we capture anonymous metrics or keep the app completely local?  

---

## 11. Appendix A – Glossary

| Term | Definition |
|------|------------|
| **Label** | A rule describing a subset of tracks (e.g., "Indie Pop" genre). |
| **Playlist Key** | Deterministic string used to detect collisions and idempotency. |
| **Extended Mode** | Spotify's gated API tier that exposes audio-analysis endpoints. |

---

© 2025 – Internal document for personal use. 