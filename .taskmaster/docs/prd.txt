# Spotify Liked Songs Auto-Categorizer CLI
**Product Requirements Document (PRD)**  
*Version 2.0 – 01 June 2025*

---

## 1. Purpose

Most Spotify users gradually accumulate hundreds or even thousands of **Liked Songs** without ever organising them into playlists.  
The purpose of this product is to perform a **one-time, high-trust clean-up** that:

1. Scans the user's entire Liked Songs library (≈ 1 500 tracks for the initial target user).  
2. Discovers intuitive grouping "labels" (e.g., genres, eras, BPM bands).  
3. Creates clearly-named playlists in the user's account that hold those tracks.  
4. Preserves user control through a CLI preview and confirmation system with easy rollback.

---

## 2. Goals & Success Metrics

| Goal | Metric | Target |
|------|--------|--------|
| Rapid clean-up | End-to-end runtime for 1 500 songs | **≤ 3 min** (P50), **≤ 6 min** (P95) |
| User confidence | % CLI sessions where user confirms playlist generation after preview | **≥ 80 %** |
| Playlist precision | Manual audit: tracks that logically fit their playlist | **≥ 90 %** |
| Low disruption | Spotify abuse-flag "playlist spam" incidents | **0** |

> *Note:* Metrics collected locally only; no server-side tracking required for this personal CLI tool.

---

## 3. Personas

| Persona | Characteristics | Needs |
|---------|-----------------|-------|
| **Primary User** (owner) | • Heavy Spotify listener<br>• 1 000 – 5 000 liked tracks<br>• Comfortable with CLI tools<br>• Technical background | • Fast, accurate categorisation<br>• Simple command interface<br>• Confidence that nothing breaks their library |
| **Future Users** | • Same music habits<br>• Comfortable installing npm packages | • Clear documentation<br>• Simple installation process |

---

## 4. Assumptions & Constraints

* Single-user CLI tool — no multi-tenant complexity.  
* Access limited to standard Spotify scopes:  
  `user-library-read`, `playlist-modify-private`, `playlist-modify-public`.  
  Audio-feature endpoints require **Extended Mode**.  
* Spotify rate limit: **10 requests / sec** per user token.  
* Max 10 000 tracks per playlist (Spotify hard limit) — well above current scope.  
* File-based SQLite is sufficient for caching track metadata and run history.
* Distributed as npm package for easy installation.

---

## 5. Functional Requirements

### 5.1 Authentication
* Use OAuth 2.0 Device Flow (recommended) or manual token input.  
* Store tokens encrypted in local config file (`~/.spotify-organizer/config`).
* Automatic token refresh handling.

### 5.2 CLI Interface
| Req-ID | Requirement |
|--------|-------------|
| **CLI-01** | `spotify-organizer auth` - handle Spotify authentication flow |
| **CLI-02** | `spotify-organizer scan [--extended-mode]` - fetch and cache all liked songs |
| **CLI-03** | `spotify-organizer analyze [--min-tracks=N]` - discover grouping labels |
| **CLI-04** | `spotify-organizer preview` - show proposed playlists in formatted table |
| **CLI-05** | `spotify-organizer generate [--confirm] [--dry-run]` - create playlists |
| **CLI-06** | `spotify-organizer rollback [--last]` - undo recent playlist creation |
| **CLI-07** | `spotify-organizer status` - show scan status, token validity, last run info |

### 5.3 Data Ingest
| Req-ID | Requirement |
|--------|-------------|
| **ING-01** | Fetch all liked tracks, 50 per call, until `next` is `null`. |
| **ING-02** | Cache `track_id`, `track_name`, `artists`, `artist_ids`, `album`, `release_year`, `duration_ms`, `popularity`. |
| **ING-03** | For each `artist_id`, fetch genres (batch `GET /artists?ids=`). |
| **ING-04** | If Extended Mode: batch-fetch audio features (danceability, energy, valence, tempo). |
| **ING-05** | Persist ingest timestamp; skip unchanged tracks on reruns. |
| **ING-06** | Display progress bar during scan operations. |

### 5.4 Label Discovery
| Req-ID | Requirement |
|--------|-------------|
| **LAB-01** | Generate histograms of candidate dimensions: top 15 genres, decade buckets, BPM bands (if available), energy quartiles. |
| **LAB-02** | Apply configurable filters: minimum track count per playlist, excluded genres. |
| **LAB-03** | Persist the final label rule set in local config. |
| **LAB-04** | Allow CLI flags to override default thresholds. |

### 5.5 Playlist Generation
| Req-ID | Requirement |
|--------|-------------|
| **PLY-01** | Derive a deterministic playlist **key** from the label (e.g., `genre=indie_pop`). |
| **PLY-02** | Base playlist name template: `<emoji> <readable label>` (emoji chosen per dimension). |
| **PLY-03** | If a name collision exists, append ordinal suffix `(2)`, `(3)…`. |
| **PLY-04** | Batch add tracks in groups of 20, sleep 500 ms between batches. |
| **PLY-05** | Maintain mapping `playlist_key → playlist_id` in SQLite for rollback. |
| **PLY-06** | Show real-time progress during playlist creation. |

### 5.6 Preview & Confirmation
| Req-ID | Requirement |
|--------|-------------|
| **PRV-01** | Display formatted table: playlist name, track count, sample tracks. |
| **PRV-02** | Require explicit `--confirm` flag or interactive confirmation to proceed. |
| **PRV-03** | Support `--dry-run` mode that shows what would be created without making changes. |
| **PRV-04** | Prevent concurrent runs through lockfile mechanism. |

### 5.7 Undo
| Req-ID | Requirement |
|--------|-------------|
| **UND-01** | Store rollback data for each generation run with timestamp. |
| **UND-02** | `rollback --last` deletes playlists from most recent run only. |
| **UND-03** | Handle partial failures gracefully and surface errors clearly. |
| **UND-04** | Expire rollback data after 30 days automatically. |

---

## 6. Non-Functional Requirements

| Category | Requirement |
|----------|-------------|
| **Performance** | Categorise 1 500 tracks in **≤ 3 min** P50; use batch endpoints aggressively. |
| **Scalability** | Design ingest & grouping code to stream; memory ≤ 150 MB for 10 000 tracks. |
| **Reliability** | Retry Spotify 5xx up to 3 times with exponential back-off; persist intermediate state so operations can resume. |
| **Security** | Store tokens encrypted with AES-256 in local config; no network transmission of tokens except to Spotify. |
| **Usability** | Clear help text, progress indicators, colored output, intuitive command structure. |
| **Maintainability** | Codebase linted (ESLint / Prettier), 80 % unit test coverage for grouping logic. |

---

## 7. Tech Stack

| Layer | Choice | Rationale |
|-------|--------|-----------|
| **Runtime** | Node.js 20 | Mature ecosystem, excellent Spotify SDK support |
| **CLI Framework** | Commander.js | Industry standard for Node.js CLI tools |
| **Spotify API** | `spotify-web-api-node` | Mature SDK with batching helpers |
| **Data store** | SQLite (file) via Prisma | Zero-config local storage, easy schema management |
| **Progress Display** | `cli-progress` + `chalk` | Professional CLI UX with colors and progress bars |
| **Distribution** | npm package | Easy installation with `npm install -g` |
| **CI** | GitHub Actions | Lint, unit tests, npm publish automation |

---

## 8. Installation & Usage Flow

```bash
# Installation
npm install -g spotify-organizer

# First-time setup
spotify-organizer auth

# Scan liked songs (with audio features)
spotify-organizer scan --extended-mode

# Analyze and preview playlists
spotify-organizer analyze --min-tracks=15
spotify-organizer preview

# Generate playlists (with confirmation)
spotify-organizer generate --confirm

# Rollback if needed
spotify-organizer rollback --last
```

---

## 9. Future Scope (Phase 2+)

1. **Continuous Sync** – `watch` command that monitors new likes and updates playlists.  
2. **Advanced Filtering** – custom rules engine for complex categorization logic.  
3. **Export/Import** – share categorization rules between users.  
4. **Playlist Templates** – predefined categorization schemes (workout, study, etc.).  
5. **Integration** – hooks for Last.fm, music streaming APIs beyond Spotify.

---

## 10. Out of Scope (MVP)

* Editing or deleting existing user playlists.  
* Real-time monitoring of Spotify activity.  
* Local audio analysis from track previews.  
* GUI or web interface.
* Multi-user installations or cloud deployment.

---

## 11. Open Questions

1. **Default emoji set** – fixed mapping or randomized per category?  
2. **Minimum playlist size** – default 15 tracks, configurable range?  
3. **Extended Mode fallback** – graceful degradation without audio features?  
4. **Config location** – `~/.spotify-organizer/` vs `~/.config/spotify-organizer/`?  

---

## 12. Appendix A – Glossary

| Term | Definition |
|------|------------|
| **Label** | A rule describing a subset of tracks (e.g., "Indie Pop" genre). |
| **Playlist Key** | Deterministic string used to detect collisions and enable rollback. |
| **Extended Mode** | Spotify's gated API tier that exposes audio-analysis endpoints. |
| **Device Flow** | OAuth flow designed for CLI applications without web browser. |

---

© 2025 – Internal document for personal CLI tool development. 